@using DevExtreme.AspNet.Mvc
@using DevExtreme.AspNet.Mvc.Builders
@using static DevExtreme.AspNet.Mvc.GridScrollingMode
@using DAL.Models
<script src="~/js/grids/services-grid.js"></script>

@(Html.DevExtreme().DataGrid<DAL.Models.ServiceModel>()
    .ID("servicesGrid")
    .ShowBorders(true)
    .Width("100%")
    .ColumnAutoWidth(false)
    .Scrolling(s => s
        .Mode(GridScrollingMode.Standard)
        .ShowScrollbar(ShowScrollbarMode.Always)
    )
    .Paging(p => p.Enabled(false))
    .Editing(e => e.Mode(GridEditMode.Popup)
        .AllowUpdating(false)
        .AllowAdding(true)
        .AllowDeleting(false)
        .Popup(p => p
            .Title("Add Service")
            .ShowTitle(true)
            .Width(700)
            .Height(400)
        )
        .Form(f => f.Items(items =>
        {
            items.AddGroup()
                .ColCount(2)
                .ColSpan(2)
                .Items(groupItems =>
                {
                    groupItems.AddSimpleFor(m => m.Name).DataField("name");
                    groupItems.AddSimpleFor(m => m.MapUrl).DataField("mapUrl");
                    groupItems.AddSimpleFor(m => m.Email).DataField("email").Visible(false) ;
                    groupItems.AddSimpleFor(m => m.DealerID).DataField("dealerID");
                    groupItems.AddSimpleFor(m => m.OpeningDate).DataField("openingDate")
                        .Editor(e => e.DateBox()
                            .DisplayFormat("dd/MM/yyyy HH:mm")
                            .Type(DateBoxType.DateTime)
                            .PickerType(DateBoxPickerType.Calendar)
                            .Width(200));
                    groupItems.AddSimpleFor(m => m.AddressLine1).DataField("addressLine1");
                    groupItems.AddSimpleFor(m => m.PostalCode).DataField("postalCode");
                });
        }))
    )
    .Columns(columns =>
    {
     columns.Add()
    .Caption("Actions")
    .Width(150)
    .AllowFiltering(false)
    .AllowSorting(false)
    .CellTemplate(@<text>
    <div class="d-flex justify-content-around">
        <button class="btn btn-link text-primary p-0 text-decoration-none" onclick="editServiceRecord(<%- data.id %>)">
            <i class="bi bi-pencil-square me-1"></i>
            Edit
        </button>
        <button class="btn btn-link text-danger p-0 text-decoration-none" onclick="deleteServiceRecord(<%- data.id %>)">
            <i class="bi bi-trash me-1"></i>
            Delete
        </button>
    </div>
</text>);
        columns.AddFor(m => m.ID).DataField("id").Width(130);
            columns.AddFor(m => m.Name).DataField("name").Width(260);
            columns.AddFor(m => m.MapUrl).DataField("mapUrl").Width(260);
            columns.AddFor(m => m.Email).DataField("email").Width(260);
            columns.AddFor(m => m.OpeningDate).DataField("openingDate").Width(260);
        columns.AddFor(m => m.AddressLine1).DataField("addressLine1").Visible(false);
        columns.AddFor(m => m.PostalCode).DataField("postalCode").Visible(false);
        columns.AddFor(m => m.DealerID).DataField("dealerID").Width(260).Visible(true)
            .Lookup(lookup => lookup
                .DataSource(s => s.Mvc().Controller("Home").LoadAction("GetDealersForUsersAndServices").Key("id"))
                .DisplayExpr("name")
                .ValueExpr("id")
            );
    })
    .DataSource(d => d.Mvc()
        .Controller("Home")
        .LoadAction("GetServices")
        .InsertAction("AddService")
		.DeleteAction("DeleteService")
		.UpdateAction("UpdateService")
        .Key("id")

    )
)
<style>
    #servicesGrid {
        width: 100%;
    }
</style>