@using DevExtreme.AspNet.Mvc
@using DAL.Models
<script src="~/js/grids/employees-grid.js"></script>
@(
Html.DevExtreme().DataGrid<DAL.Models.EmployeeModel>()
    .ID("employeesGrid")
    .ShowBorders(true)
    .Width("100%")
    .ColumnAutoWidth(false)
    .Scrolling(s => s
        .Mode(GridScrollingMode.Standard)
        .ShowScrollbar(ShowScrollbarMode.Always)
    )
    .Paging(p => p.Enabled(false))
    .Editing(e => e.Mode(GridEditMode.Popup)
        .AllowUpdating(false)
        .AllowAdding(true)
        .AllowDeleting(false)
        .Popup(p => p
            .Title("Add Employee")
            .ShowTitle(true)
            .Width(700)
            .Height(400)
            .OnShowing("function(e) { console.log('Popup showing'); }")
        )
        .Form(f => f.Items(items =>
        {
            items.AddGroup()
                .ColCount(2)
                .ColSpan(2)
                .Items(groupItems =>
                {
                    groupItems.AddSimpleFor(m => m.Name).DataField("name");
                    groupItems.AddSimpleFor(m => m.DealerID).DataField("dealerID");
                    groupItems.AddSimpleFor(m => m.ServiceID).DataField("serviceID");
                    groupItems.AddSimpleFor(m => m.Email)
                        .DataField("email")
                        .Editor(e => e.TextBox().ReadOnly(true)).Visible(false);
                    groupItems.AddSimpleFor(m => m.TCIDNO)
                        .DataField("tcidno")
                        .Editor(e => e.TextBox().MaxLength(11))
                        .ValidationRules(rules =>
                        {
                            rules.AddRequired().Message("TC Kimlik No zorunludur");
                            rules.AddPattern()
                                .Pattern("^[0-9]{11}$")
                                .Message("TC Kimlik No 11 haneli rakamlardan oluşmalıdır");
                        });
                    groupItems.AddSimpleFor(m => m.IsTechnician).DataField("isTechnician").Editor(e => e.CheckBox());
                    groupItems.AddSimpleFor(m => m.CreatedOn).DataField("createdOn")
                        .Editor(e => e.DateBox()
                            .DisplayFormat("dd/MM/yyyy HH:mm")
                            .Type(DateBoxType.DateTime)
                            .PickerType(DateBoxPickerType.Calendar)
                            .Width(200));
                });
        }))
    )
    .Columns(columns =>
    {
        columns.Add()
        .Width(150)
        .Caption("Actions")
        .AllowFiltering(false)
        .AllowSorting(false)
        .CellTemplate(@<text>
    <div class="d-flex justify-content-around">
        <button class="btn btn-link text-primary p-0 text-decoration-none" onclick="editEmployeeRecord(<%- data.id %>)">
            <i class="bi bi-pencil-square me-1"></i>
            Edit
        </button>
        <button class="btn btn-link text-danger p-0 text-decoration-none" onclick="deleteEmployeeRecord(<%- data.id %>)">
            <i class="bi bi-trash me-1"></i>
            Delete
        </button>
    </div>
</text>);
        columns.AddFor(m => m.ID).DataField("id").Width(140);
        columns.AddFor(m => m.Name).DataField("name").Width(260);
        columns.AddFor(m => m.TCIDNO).DataField("tcidno").Width(260);
        columns.AddFor(m => m.DealerID).DataField("dealerID").Width(260).Visible(true)
            .Lookup(lookup => lookup
                .DataSource(s => s.Mvc().Controller("Home").LoadAction("GetDealersForUsersAndServices").Key("id"))
                .DisplayExpr("name")
                .ValueExpr("id")
            );
        columns.AddFor(m => m.ServiceID).DataField("serviceID").Width(260).Visible(true)
        .Lookup(lookup => lookup
            .DataSource(s => s.Mvc().Controller("Home").LoadAction("GetServicesByID").Key("id"))
            .DisplayExpr("name")
            .ValueExpr("id")
        );
        columns.AddFor(m => m.Email).DataField("email").Width(260);
        columns.AddFor(m => m.IsTechnician).DataField("isTechnician").Width(200);
        columns.AddFor(m => m.CreatedOn).DataField("createdOn").Visible(false);

    })
    .DataSource(d => d.Mvc()
        .Controller("Home")
        .LoadAction("GetEmployees")
        .InsertAction("AddEmployee")
        .Key("id")
        .OnBeforeSend("function(operation, ajaxSettings) { console.log('Operation:', operation); if (operation === 'insert' || operation === 'update') { ajaxSettings.contentType = 'application/json'; if (typeof ajaxSettings.data === 'string') { try { ajaxSettings.data = JSON.stringify(JSON.parse(ajaxSettings.data)); } catch(e) { console.error('Error parsing data:', e); } } else { ajaxSettings.data = JSON.stringify(ajaxSettings.data); console.log('Serialized data: ', ajaxSettings.data)} } }")
    )
)

<style>
    #employeesGrid {
        width: 100%;
    }
</style>