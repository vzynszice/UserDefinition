@using DevExtreme.AspNet.Mvc
@using DAL.Models

@(Html.DevExtreme().DataGrid<DAL.Models.Dealer>()
    .ID("dealersGrid")
    .ShowBorders(true)
    .Width("100%")
    .ColumnAutoWidth(false)
    .Scrolling(s => s
        .Mode(GridScrollingMode.Standard)
        .ShowScrollbar(ShowScrollbarMode.Always)
    )
    .Paging(p => p.Enabled(false))
    .Editing(e => e.Mode(GridEditMode.Popup)
        .AllowUpdating(false)
        .AllowAdding(true)
        .AllowDeleting(false)
        .Popup(p => p
            .Title("Add Dealer")
            .ShowTitle(true)
            .Width(700)
            .Height(400)
        )
        .Form(f => f.Items(items =>
        {
            items.AddGroup()
                .ColCount(2)
                .ColSpan(2)
                .Items(groupItems =>
                {
                    groupItems.AddSimpleFor(m => m.Name).DataField("name");
                    groupItems.AddSimpleFor(m => m.WebAddress).DataField("webAddress");
                    groupItems.AddSimpleFor(m => m.Email).DataField("email").Visible(false);
                    groupItems.AddSimpleFor(m => m.OpeningDate).DataField("openingDate")
                        .Editor(e => e.DateBox()
                            .DisplayFormat("dd/MM/yyyy HH:mm")
                            .Type(DateBoxType.DateTime)
                            .PickerType(DateBoxPickerType.Calendar)
                            .Width(200));
                    groupItems.AddSimpleFor(m => m.AddressLine1).DataField("addressLine1");
                    groupItems.AddSimpleFor(m => m.PostalCode).DataField("postalCode");
                });
        }))
    )
    .Columns(columns =>
    {
        columns.Add()
        .Caption("Actions")
        .AllowFiltering(false)
        .Width(150)
        .AllowSorting(false)
        .CellTemplate(@<text>
    <div class="d-flex justify-content-around">
        <button class="btn btn-link text-primary p-0 text-decoration-none" onclick="editDealerRecord(<%- data.id %>)">
            <i class="bi bi-pencil-square me-1"></i>
            Edit
        </button>
        <button class="btn btn-link text-danger p-0 text-decoration-none" onclick="deleteDealerRecord(<%- data.id %>)">
            <i class="bi bi-trash me-1"></i>
            Delete
        </button>
    </div>
</text>);
        columns.AddFor(m => m.ID).DataField("id").Width(130);
        columns.AddFor(m => m.Name).DataField("name").Width(260);
        columns.AddFor(m => m.WebAddress).DataField("webAddress").Width(260);
        columns.AddFor(m => m.Email).DataField("email").Width(260);
        columns.AddFor(m => m.OpeningDate).DataField("openingDate").Width(260);
        columns.AddFor(m => m.AddressLine1).DataField("addressLine1").Width(260);
        columns.AddFor(m => m.PostalCode).DataField("postalCode").Visible(false);
        
    })
    .DataSource(d => d.Mvc()
        .Controller("Home")
        .LoadAction("GetDealers")
        .InsertAction("AddDealer")
        .DeleteAction("DeleteDealer")
        .UpdateAction("UpdateDealer")
        .Key("id")
    )
)
<script>
    window.editDealerRecord = function(id) {
        var dataGrid = $("#dealersGrid").dxDataGrid("instance");
        if (dataGrid) {
            var rowIndex = dataGrid.getRowIndexByKey(id);
            if (rowIndex >= 0) {
                dataGrid.editRow(rowIndex);
            }
        }
    };

    window.deleteDealerRecord = function(id) {
        var dataGrid = $("#dealersGrid").dxDataGrid("instance");
        if (dataGrid) {
            var rowIndex = dataGrid.getRowIndexByKey(id);
            if (rowIndex >= 0) {
                dataGrid.deleteRow(rowIndex);
            }
        }
    };

    function initializeDealerGrid() {
        console.log("Grid initialization started");
        var dataGrid = $("#dealersGrid").dxDataGrid("instance");

        window.dealerForm_onFieldDataChanged = function(e) {
            try {
                console.log("Field changed event details:", e);

                var popup = dataGrid._editPopup;
                var form = popup.$content().find(".dx-form").dxForm("instance");

                if (!form) {
                    console.error("Form instance not found");
                    return;
                }

                var formData = form.option("formData");
                console.log("Current form data:", formData);

                if (e.dataField === "name") {
                    formData[e.dataField] = e.value;
                    if (formData.name) {
                        formData.email = (formData.name + "@@hyundaiassan.com.tr")
                            .toLowerCase()
                            .replace(/\s+/g, '')
                            .replace(/[ğ]/g, 'g')
                            .replace(/[ü]/g, 'u')
                            .replace(/[ş]/g, 's')
                            .replace(/[ı]/g, 'i')
                            .replace(/[ö]/g, 'o')
                            .replace(/[ç]/g, 'c');

                        console.log("Generated email:", formData.email);

                        var emailEditor = form.getEditor("email");
                        if (emailEditor) {
                            emailEditor.option("value", formData.email);
                        }
                    }

                    form.option("formData", formData);
                    var changes = dataGrid.option("editing.changes");

                    if (changes.length > 0) {
                        changes[0].data = { ...changes[0].data, ...formData };
                        dataGrid.option("editing.changes", changes);
                    }
                }
            } catch (error) {
                console.error("Error in dealerForm_onFieldDataChanged:", error);
            }
        };

        dataGrid.on("saving", function(e) {
            console.log("Saving event triggered:", e);

            var change = e.changes[0];
            if (change && change.type !== "remove") {
                var data = change.data;
                if (data && data.name) {
                    data.email = (data.name + "@@hyundaiassan.com.tr")
                        .toLowerCase()
                        .replace(/\s+/g, '')
                        .replace(/[ğ]/g, 'g')
                        .replace(/[ü]/g, 'u')
                        .replace(/[ş]/g, 's')
                        .replace(/[ı]/g, 'i')
                        .replace(/[ö]/g, 'o')
                        .replace(/[ç]/g, 'c');

                    e.changes[0].data = data;
                }
            }
        });

        dataGrid.on("rowRemoved", function(e) {
            console.log("Row successfully removed:", e);
            dataGrid.refresh();
        });

        dataGrid.on("editingStart", function(e) {
            console.log("Editing started:", e);
            var editForm = e.component.getController('editing')._editForm;
            if (editForm) {
                editForm.option("onFieldDataChanged", window.dealerForm_onFieldDataChanged);
            }
        });
    }

    // Document ready event handler
    $(function() {
        console.log("Document ready");
        initializeDealerGrid(); // initializeUserGrid yerine initializeDealerGrid olarak düzeltildi
    });
</script>

<style>
    #dealersGrid {
        width: 100%;
        overflow-x: auto;
    }
</style>